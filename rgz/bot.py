import os
import psycopg2
import requests
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import asyncio

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
DB_CONFIG = {
    "host": "localhost",
    "user": "postgres",
    "password": "postgres",
    "database": "RGZ"
}

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegistrationState(StatesGroup):
    waiting_for_name = State()

class AddOperationState(StatesGroup):
    choosing_type = State()
    entering_amount = State()
    entering_date = State()

class CurrencyState(StatesGroup):
    choosing_currency = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
operation_type_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–û–•–û–î"), KeyboardButton(text="–†–ê–°–•–û–î")]
    ],
    resize_keyboard=True
)

currency_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="RUB"), KeyboardButton(text="USD"), KeyboardButton(text="EUR")]
    ],
    resize_keyboard=True
)

def get_db():
    return psycopg2.connect(**DB_CONFIG)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/add_operation - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/operations - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        "/lk - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    )

@dp.message(Command("reg"))
async def register_user(message: types.Message, state: FSMContext):
    conn = get_db()
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (message.chat.id,))
    if cursor.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(RegistrationState.waiting_for_name)

@dp.message(RegistrationState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (chat_id, name) VALUES (%s, %s)",
        (message.chat.id, message.text)
    )
    conn.commit()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.clear()

@dp.message(Command("add_operation"))
async def add_operation_start(message: types.Message, state: FSMContext):
    conn = get_db()
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (message.chat.id,))
    if not cursor.fetchone():
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /reg")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=operation_type_kb)
    await state.set_state(AddOperationState.choosing_type)

@dp.message(AddOperationState.choosing_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["–î–û–•–û–î", "–†–ê–°–•–û–î"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫")
        return
    
    await state.update_data(operation_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(AddOperationState.entering_amount)

@dp.message(AddOperationState.entering_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
        return
    
    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await state.set_state(AddOperationState.entering_date)

@dp.message(AddOperationState.entering_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        op_date = date.fromisoformat(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
        return
    
    data = await state.get_data()
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO operations (date, amount, chat_id, type_operation) VALUES (%s, %s, %s, %s)",
        (op_date, data['amount'], message.chat.id, data['operation_type'])
    )
    conn.commit()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@dp.message(Command("operations"))
async def show_operations(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=currency_kb)
    await state.set_state(CurrencyState.choosing_currency)

@dp.message(CurrencyState.choosing_currency)
async def process_currency(message: types.Message, state: FSMContext):
    currency = message.text
    rate = 1.0
    
    if currency not in ["RUB", "USD", "EUR"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    if currency != "RUB":
        try:
            response = requests.get(f'http://localhost:5000/rate?currency={currency}')
            if response.status_code == 200:
                rate = response.json()['rate']
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
                return
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É –∫—É—Ä—Å–æ–≤")
            return
    
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT * FROM operations WHERE chat_id = %s ORDER BY date DESC",
        (message.chat.id,)
    )
    operations = cursor.fetchall()
    
    response = ["–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:"]
    total = 0.0
    for op in operations:
        converted = float(op[2]) / rate
        response.append(
            f"{op[1]}: {op[4]} - {converted:.2f} {currency}"
        )
        total += converted
    
    response.append(f"\n–ò—Ç–æ–≥–æ: {total:.2f} {currency}")
    await message.answer("\n".join(response))
    await state.clear()

@dp.message(Command("lk"))
async def show_profile(message: types.Message):
    conn = get_db()
    cursor = conn.cursor()
    
    cursor.execute(
        "SELECT name, registration_date FROM users WHERE chat_id = %s",
        (message.chat.id,)
    )
    user = cursor.fetchone()
    
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /reg")
        return
    
    cursor.execute(
        "SELECT COUNT(*) FROM operations WHERE chat_id = %s",
        (message.chat.id,)
    )
    operations_count = cursor.fetchone()[0]
    
    response = (
        f"üë§ –õ–æ–≥–∏–Ω: {user[0]}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[1]}\n"
        f"üíº –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {operations_count}"
    )
    await message.answer(response)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())